
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model tb_user
 */

export type tb_user = {
  id_user: number
  fullname: string
  username: string
  gender: string
  alamat: string
  email: string
  password: string
  img_profil: string
}

/**
 * Model tb_buku
 */

export type tb_buku = {
  id_user: number
  judul_buku: string
  pengarang: string
  publisher: string
  isbn: number
  pages: number
  img_buku: string
  id_kategori: number | null
  id_buku: number
  id_rating: number | null
}

/**
 * Model tb_kategori
 */

export type tb_kategori = {
  id_kategori: number
  nama_kategori: string
  img_kategori: string
}

/**
 * Model tb_rating
 */

export type tb_rating = {
  id_rating: number
  rating: number
  id_buku: number | null
  id_user: number | null
  komentar: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tb_users
 * const tb_users = await prisma.tb_user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tb_users
   * const tb_users = await prisma.tb_user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.tb_user`: Exposes CRUD operations for the **tb_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tb_users
    * const tb_users = await prisma.tb_user.findMany()
    * ```
    */
  get tb_user(): Prisma.tb_userDelegate<GlobalReject>;

  /**
   * `prisma.tb_buku`: Exposes CRUD operations for the **tb_buku** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tb_bukus
    * const tb_bukus = await prisma.tb_buku.findMany()
    * ```
    */
  get tb_buku(): Prisma.tb_bukuDelegate<GlobalReject>;

  /**
   * `prisma.tb_kategori`: Exposes CRUD operations for the **tb_kategori** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tb_kategoris
    * const tb_kategoris = await prisma.tb_kategori.findMany()
    * ```
    */
  get tb_kategori(): Prisma.tb_kategoriDelegate<GlobalReject>;

  /**
   * `prisma.tb_rating`: Exposes CRUD operations for the **tb_rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tb_ratings
    * const tb_ratings = await prisma.tb_rating.findMany()
    * ```
    */
  get tb_rating(): Prisma.tb_ratingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    tb_user: 'tb_user',
    tb_buku: 'tb_buku',
    tb_kategori: 'tb_kategori',
    tb_rating: 'tb_rating'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model tb_user
   */


  export type AggregateTb_user = {
    count: Tb_userCountAggregateOutputType | null
    avg: Tb_userAvgAggregateOutputType | null
    sum: Tb_userSumAggregateOutputType | null
    min: Tb_userMinAggregateOutputType | null
    max: Tb_userMaxAggregateOutputType | null
  }

  export type Tb_userAvgAggregateOutputType = {
    id_user: number
  }

  export type Tb_userSumAggregateOutputType = {
    id_user: number
  }

  export type Tb_userMinAggregateOutputType = {
    id_user: number
    fullname: string | null
    username: string | null
    gender: string | null
    alamat: string | null
    email: string | null
    password: string | null
    img_profil: string | null
  }

  export type Tb_userMaxAggregateOutputType = {
    id_user: number
    fullname: string | null
    username: string | null
    gender: string | null
    alamat: string | null
    email: string | null
    password: string | null
    img_profil: string | null
  }

  export type Tb_userCountAggregateOutputType = {
    id_user: number
    fullname: number | null
    username: number | null
    gender: number | null
    alamat: number | null
    email: number | null
    password: number | null
    img_profil: number | null
    _all: number
  }


  export type Tb_userAvgAggregateInputType = {
    id_user?: true
  }

  export type Tb_userSumAggregateInputType = {
    id_user?: true
  }

  export type Tb_userMinAggregateInputType = {
    id_user?: true
    fullname?: true
    username?: true
    gender?: true
    alamat?: true
    email?: true
    password?: true
    img_profil?: true
  }

  export type Tb_userMaxAggregateInputType = {
    id_user?: true
    fullname?: true
    username?: true
    gender?: true
    alamat?: true
    email?: true
    password?: true
    img_profil?: true
  }

  export type Tb_userCountAggregateInputType = {
    id_user?: true
    fullname?: true
    username?: true
    gender?: true
    alamat?: true
    email?: true
    password?: true
    img_profil?: true
    _all?: true
  }

  export type Tb_userAggregateArgs = {
    /**
     * Filter which tb_user to aggregate.
    **/
    where?: tb_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_users to fetch.
    **/
    orderBy?: Enumerable<tb_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: tb_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tb_users
    **/
    count?: true | Tb_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Tb_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Tb_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Tb_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Tb_userMaxAggregateInputType
  }

  export type GetTb_userAggregateType<T extends Tb_userAggregateArgs> = {
    [P in keyof T & keyof AggregateTb_user]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTb_user[P]>
      : GetScalarType<T[P], AggregateTb_user[P]>
  }



  export type tb_userSelect = {
    id_user?: boolean
    fullname?: boolean
    username?: boolean
    gender?: boolean
    alamat?: boolean
    email?: boolean
    password?: boolean
    img_profil?: boolean
    tb_buku?: boolean | tb_bukuFindManyArgs
    tb_rating?: boolean | tb_ratingFindManyArgs
  }

  export type tb_userInclude = {
    tb_buku?: boolean | tb_bukuFindManyArgs
    tb_rating?: boolean | tb_ratingFindManyArgs
  }

  export type tb_userGetPayload<
    S extends boolean | null | undefined | tb_userArgs,
    U = keyof S
      > = S extends true
        ? tb_user
    : S extends undefined
    ? never
    : S extends tb_userArgs | tb_userFindManyArgs
    ?'include' extends U
    ? tb_user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['include'][P]>>  :
        P extends 'tb_rating'
        ? Array < tb_ratingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof tb_user ?tb_user [P]
  : 
          P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['select'][P]>>  :
        P extends 'tb_rating'
        ? Array < tb_ratingGetPayload<S['select'][P]>>  : never
  } 
    : tb_user
  : tb_user


  type tb_userCountArgs = Merge<
    Omit<tb_userFindManyArgs, 'select' | 'include'> & {
      select?: Tb_userCountAggregateInputType | true
    }
  >

  export interface tb_userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tb_user that matches the filter.
     * @param {tb_userFindUniqueArgs} args - Arguments to find a Tb_user
     * @example
     * // Get one Tb_user
     * const tb_user = await prisma.tb_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tb_userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tb_userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tb_user'> extends True ? CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>> : CheckSelect<T, Prisma__tb_userClient<tb_user | null >, Prisma__tb_userClient<tb_userGetPayload<T> | null >>

    /**
     * Find the first Tb_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_userFindFirstArgs} args - Arguments to find a Tb_user
     * @example
     * // Get one Tb_user
     * const tb_user = await prisma.tb_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tb_userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tb_userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tb_user'> extends True ? CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>> : CheckSelect<T, Prisma__tb_userClient<tb_user | null >, Prisma__tb_userClient<tb_userGetPayload<T> | null >>

    /**
     * Find zero or more Tb_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tb_users
     * const tb_users = await prisma.tb_user.findMany()
     * 
     * // Get first 10 Tb_users
     * const tb_users = await prisma.tb_user.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const tb_userWithId_userOnly = await prisma.tb_user.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends tb_userFindManyArgs>(
      args?: SelectSubset<T, tb_userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tb_user>>, PrismaPromise<Array<tb_userGetPayload<T>>>>

    /**
     * Create a Tb_user.
     * @param {tb_userCreateArgs} args - Arguments to create a Tb_user.
     * @example
     * // Create one Tb_user
     * const Tb_user = await prisma.tb_user.create({
     *   data: {
     *     // ... data to create a Tb_user
     *   }
     * })
     * 
    **/
    create<T extends tb_userCreateArgs>(
      args: SelectSubset<T, tb_userCreateArgs>
    ): CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>>

    /**
     * Delete a Tb_user.
     * @param {tb_userDeleteArgs} args - Arguments to delete one Tb_user.
     * @example
     * // Delete one Tb_user
     * const Tb_user = await prisma.tb_user.delete({
     *   where: {
     *     // ... filter to delete one Tb_user
     *   }
     * })
     * 
    **/
    delete<T extends tb_userDeleteArgs>(
      args: SelectSubset<T, tb_userDeleteArgs>
    ): CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>>

    /**
     * Update one Tb_user.
     * @param {tb_userUpdateArgs} args - Arguments to update one Tb_user.
     * @example
     * // Update one Tb_user
     * const tb_user = await prisma.tb_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tb_userUpdateArgs>(
      args: SelectSubset<T, tb_userUpdateArgs>
    ): CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>>

    /**
     * Delete zero or more Tb_users.
     * @param {tb_userDeleteManyArgs} args - Arguments to filter Tb_users to delete.
     * @example
     * // Delete a few Tb_users
     * const { count } = await prisma.tb_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tb_userDeleteManyArgs>(
      args?: SelectSubset<T, tb_userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tb_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tb_users
     * const tb_user = await prisma.tb_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tb_userUpdateManyArgs>(
      args: SelectSubset<T, tb_userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tb_user.
     * @param {tb_userUpsertArgs} args - Arguments to update or create a Tb_user.
     * @example
     * // Update or create a Tb_user
     * const tb_user = await prisma.tb_user.upsert({
     *   create: {
     *     // ... data to create a Tb_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tb_user we want to update
     *   }
     * })
    **/
    upsert<T extends tb_userUpsertArgs>(
      args: SelectSubset<T, tb_userUpsertArgs>
    ): CheckSelect<T, Prisma__tb_userClient<tb_user>, Prisma__tb_userClient<tb_userGetPayload<T>>>

    /**
     * Count the number of Tb_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_userCountArgs} args - Arguments to filter Tb_users to count.
     * @example
     * // Count the number of Tb_users
     * const count = await prisma.tb_user.count({
     *   where: {
     *     // ... the filter for the Tb_users we want to count
     *   }
     * })
    **/
    count<T extends tb_userCountArgs>(
      args?: Subset<T, tb_userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tb_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tb_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tb_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tb_userAggregateArgs>(args: Subset<T, Tb_userAggregateArgs>): PrismaPromise<GetTb_userAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for tb_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tb_userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tb_buku<T extends tb_bukuFindManyArgs = {}>(args?: Subset<T, tb_bukuFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tb_buku>>, PrismaPromise<Array<tb_bukuGetPayload<T>>>>;

    tb_rating<T extends tb_ratingFindManyArgs = {}>(args?: Subset<T, tb_ratingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tb_rating>>, PrismaPromise<Array<tb_ratingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tb_user findUnique
   */
  export type tb_userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * Throw an Error if a tb_user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_user to fetch.
    **/
    where: tb_userWhereUniqueInput
  }


  /**
   * tb_user findFirst
   */
  export type tb_userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * Throw an Error if a tb_user can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_user to fetch.
    **/
    where?: tb_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_users to fetch.
    **/
    orderBy?: Enumerable<tb_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tb_users.
    **/
    cursor?: tb_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tb_users.
    **/
    distinct?: Enumerable<Tb_userScalarFieldEnum>
  }


  /**
   * tb_user findMany
   */
  export type tb_userFindManyArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * Filter, which tb_users to fetch.
    **/
    where?: tb_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_users to fetch.
    **/
    orderBy?: Enumerable<tb_userOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tb_users.
    **/
    cursor?: tb_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_users.
    **/
    skip?: number
    distinct?: Enumerable<Tb_userScalarFieldEnum>
  }


  /**
   * tb_user create
   */
  export type tb_userCreateArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * The data needed to create a tb_user.
    **/
    data: XOR<tb_userCreateInput, tb_userUncheckedCreateInput>
  }


  /**
   * tb_user update
   */
  export type tb_userUpdateArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * The data needed to update a tb_user.
    **/
    data: XOR<tb_userUpdateInput, tb_userUncheckedUpdateInput>
    /**
     * Choose, which tb_user to update.
    **/
    where: tb_userWhereUniqueInput
  }


  /**
   * tb_user updateMany
   */
  export type tb_userUpdateManyArgs = {
    data: XOR<tb_userUpdateManyMutationInput, tb_userUncheckedUpdateManyInput>
    where?: tb_userWhereInput
  }


  /**
   * tb_user upsert
   */
  export type tb_userUpsertArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * The filter to search for the tb_user to update in case it exists.
    **/
    where: tb_userWhereUniqueInput
    /**
     * In case the tb_user found by the `where` argument doesn't exist, create a new tb_user with this data.
    **/
    create: XOR<tb_userCreateInput, tb_userUncheckedCreateInput>
    /**
     * In case the tb_user was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<tb_userUpdateInput, tb_userUncheckedUpdateInput>
  }


  /**
   * tb_user delete
   */
  export type tb_userDeleteArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
    /**
     * Filter which tb_user to delete.
    **/
    where: tb_userWhereUniqueInput
  }


  /**
   * tb_user deleteMany
   */
  export type tb_userDeleteManyArgs = {
    where?: tb_userWhereInput
  }


  /**
   * tb_user without action
   */
  export type tb_userArgs = {
    /**
     * Select specific fields to fetch from the tb_user
    **/
    select?: tb_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_userInclude | null
  }



  /**
   * Model tb_buku
   */


  export type AggregateTb_buku = {
    count: Tb_bukuCountAggregateOutputType | null
    avg: Tb_bukuAvgAggregateOutputType | null
    sum: Tb_bukuSumAggregateOutputType | null
    min: Tb_bukuMinAggregateOutputType | null
    max: Tb_bukuMaxAggregateOutputType | null
  }

  export type Tb_bukuAvgAggregateOutputType = {
    id_user: number
    isbn: number
    pages: number
    id_kategori: number | null
    id_buku: number
    id_rating: number | null
  }

  export type Tb_bukuSumAggregateOutputType = {
    id_user: number
    isbn: number
    pages: number
    id_kategori: number | null
    id_buku: number
    id_rating: number | null
  }

  export type Tb_bukuMinAggregateOutputType = {
    id_user: number
    judul_buku: string | null
    pengarang: string | null
    publisher: string | null
    isbn: number
    pages: number
    img_buku: string | null
    id_kategori: number | null
    id_buku: number
    id_rating: number | null
  }

  export type Tb_bukuMaxAggregateOutputType = {
    id_user: number
    judul_buku: string | null
    pengarang: string | null
    publisher: string | null
    isbn: number
    pages: number
    img_buku: string | null
    id_kategori: number | null
    id_buku: number
    id_rating: number | null
  }

  export type Tb_bukuCountAggregateOutputType = {
    id_user: number
    judul_buku: number | null
    pengarang: number | null
    publisher: number | null
    isbn: number
    pages: number
    img_buku: number | null
    id_kategori: number | null
    id_buku: number
    id_rating: number | null
    _all: number
  }


  export type Tb_bukuAvgAggregateInputType = {
    id_user?: true
    isbn?: true
    pages?: true
    id_kategori?: true
    id_buku?: true
    id_rating?: true
  }

  export type Tb_bukuSumAggregateInputType = {
    id_user?: true
    isbn?: true
    pages?: true
    id_kategori?: true
    id_buku?: true
    id_rating?: true
  }

  export type Tb_bukuMinAggregateInputType = {
    id_user?: true
    judul_buku?: true
    pengarang?: true
    publisher?: true
    isbn?: true
    pages?: true
    img_buku?: true
    id_kategori?: true
    id_buku?: true
    id_rating?: true
  }

  export type Tb_bukuMaxAggregateInputType = {
    id_user?: true
    judul_buku?: true
    pengarang?: true
    publisher?: true
    isbn?: true
    pages?: true
    img_buku?: true
    id_kategori?: true
    id_buku?: true
    id_rating?: true
  }

  export type Tb_bukuCountAggregateInputType = {
    id_user?: true
    judul_buku?: true
    pengarang?: true
    publisher?: true
    isbn?: true
    pages?: true
    img_buku?: true
    id_kategori?: true
    id_buku?: true
    id_rating?: true
    _all?: true
  }

  export type Tb_bukuAggregateArgs = {
    /**
     * Filter which tb_buku to aggregate.
    **/
    where?: tb_bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_bukus to fetch.
    **/
    orderBy?: Enumerable<tb_bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: tb_bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_bukus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tb_bukus
    **/
    count?: true | Tb_bukuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Tb_bukuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Tb_bukuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Tb_bukuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Tb_bukuMaxAggregateInputType
  }

  export type GetTb_bukuAggregateType<T extends Tb_bukuAggregateArgs> = {
    [P in keyof T & keyof AggregateTb_buku]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTb_buku[P]>
      : GetScalarType<T[P], AggregateTb_buku[P]>
  }



  export type tb_bukuSelect = {
    id_user?: boolean
    judul_buku?: boolean
    pengarang?: boolean
    publisher?: boolean
    isbn?: boolean
    pages?: boolean
    img_buku?: boolean
    id_kategori?: boolean
    id_buku?: boolean
    id_rating?: boolean
    tb_kategori?: boolean | tb_kategoriArgs
    tb_rating?: boolean | tb_ratingArgs
    tb_user?: boolean | tb_userArgs
    tb_rating_tb_bukuTotb_rating_id_buku?: boolean | tb_ratingFindManyArgs
  }

  export type tb_bukuInclude = {
    tb_kategori?: boolean | tb_kategoriArgs
    tb_rating?: boolean | tb_ratingArgs
    tb_user?: boolean | tb_userArgs
    tb_rating_tb_bukuTotb_rating_id_buku?: boolean | tb_ratingFindManyArgs
  }

  export type tb_bukuGetPayload<
    S extends boolean | null | undefined | tb_bukuArgs,
    U = keyof S
      > = S extends true
        ? tb_buku
    : S extends undefined
    ? never
    : S extends tb_bukuArgs | tb_bukuFindManyArgs
    ?'include' extends U
    ? tb_buku  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'tb_kategori'
        ? tb_kategoriGetPayload<S['include'][P]> | null :
        P extends 'tb_rating'
        ? tb_ratingGetPayload<S['include'][P]> | null :
        P extends 'tb_user'
        ? tb_userGetPayload<S['include'][P]> :
        P extends 'tb_rating_tb_bukuTotb_rating_id_buku'
        ? Array < tb_ratingGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof tb_buku ?tb_buku [P]
  : 
          P extends 'tb_kategori'
        ? tb_kategoriGetPayload<S['select'][P]> | null :
        P extends 'tb_rating'
        ? tb_ratingGetPayload<S['select'][P]> | null :
        P extends 'tb_user'
        ? tb_userGetPayload<S['select'][P]> :
        P extends 'tb_rating_tb_bukuTotb_rating_id_buku'
        ? Array < tb_ratingGetPayload<S['select'][P]>>  : never
  } 
    : tb_buku
  : tb_buku


  type tb_bukuCountArgs = Merge<
    Omit<tb_bukuFindManyArgs, 'select' | 'include'> & {
      select?: Tb_bukuCountAggregateInputType | true
    }
  >

  export interface tb_bukuDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tb_buku that matches the filter.
     * @param {tb_bukuFindUniqueArgs} args - Arguments to find a Tb_buku
     * @example
     * // Get one Tb_buku
     * const tb_buku = await prisma.tb_buku.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tb_bukuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tb_bukuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tb_buku'> extends True ? CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>> : CheckSelect<T, Prisma__tb_bukuClient<tb_buku | null >, Prisma__tb_bukuClient<tb_bukuGetPayload<T> | null >>

    /**
     * Find the first Tb_buku that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_bukuFindFirstArgs} args - Arguments to find a Tb_buku
     * @example
     * // Get one Tb_buku
     * const tb_buku = await prisma.tb_buku.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tb_bukuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tb_bukuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tb_buku'> extends True ? CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>> : CheckSelect<T, Prisma__tb_bukuClient<tb_buku | null >, Prisma__tb_bukuClient<tb_bukuGetPayload<T> | null >>

    /**
     * Find zero or more Tb_bukus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_bukuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tb_bukus
     * const tb_bukus = await prisma.tb_buku.findMany()
     * 
     * // Get first 10 Tb_bukus
     * const tb_bukus = await prisma.tb_buku.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const tb_bukuWithId_userOnly = await prisma.tb_buku.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends tb_bukuFindManyArgs>(
      args?: SelectSubset<T, tb_bukuFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tb_buku>>, PrismaPromise<Array<tb_bukuGetPayload<T>>>>

    /**
     * Create a Tb_buku.
     * @param {tb_bukuCreateArgs} args - Arguments to create a Tb_buku.
     * @example
     * // Create one Tb_buku
     * const Tb_buku = await prisma.tb_buku.create({
     *   data: {
     *     // ... data to create a Tb_buku
     *   }
     * })
     * 
    **/
    create<T extends tb_bukuCreateArgs>(
      args: SelectSubset<T, tb_bukuCreateArgs>
    ): CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>>

    /**
     * Delete a Tb_buku.
     * @param {tb_bukuDeleteArgs} args - Arguments to delete one Tb_buku.
     * @example
     * // Delete one Tb_buku
     * const Tb_buku = await prisma.tb_buku.delete({
     *   where: {
     *     // ... filter to delete one Tb_buku
     *   }
     * })
     * 
    **/
    delete<T extends tb_bukuDeleteArgs>(
      args: SelectSubset<T, tb_bukuDeleteArgs>
    ): CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>>

    /**
     * Update one Tb_buku.
     * @param {tb_bukuUpdateArgs} args - Arguments to update one Tb_buku.
     * @example
     * // Update one Tb_buku
     * const tb_buku = await prisma.tb_buku.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tb_bukuUpdateArgs>(
      args: SelectSubset<T, tb_bukuUpdateArgs>
    ): CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>>

    /**
     * Delete zero or more Tb_bukus.
     * @param {tb_bukuDeleteManyArgs} args - Arguments to filter Tb_bukus to delete.
     * @example
     * // Delete a few Tb_bukus
     * const { count } = await prisma.tb_buku.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tb_bukuDeleteManyArgs>(
      args?: SelectSubset<T, tb_bukuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tb_bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_bukuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tb_bukus
     * const tb_buku = await prisma.tb_buku.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tb_bukuUpdateManyArgs>(
      args: SelectSubset<T, tb_bukuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tb_buku.
     * @param {tb_bukuUpsertArgs} args - Arguments to update or create a Tb_buku.
     * @example
     * // Update or create a Tb_buku
     * const tb_buku = await prisma.tb_buku.upsert({
     *   create: {
     *     // ... data to create a Tb_buku
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tb_buku we want to update
     *   }
     * })
    **/
    upsert<T extends tb_bukuUpsertArgs>(
      args: SelectSubset<T, tb_bukuUpsertArgs>
    ): CheckSelect<T, Prisma__tb_bukuClient<tb_buku>, Prisma__tb_bukuClient<tb_bukuGetPayload<T>>>

    /**
     * Count the number of Tb_bukus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_bukuCountArgs} args - Arguments to filter Tb_bukus to count.
     * @example
     * // Count the number of Tb_bukus
     * const count = await prisma.tb_buku.count({
     *   where: {
     *     // ... the filter for the Tb_bukus we want to count
     *   }
     * })
    **/
    count<T extends tb_bukuCountArgs>(
      args?: Subset<T, tb_bukuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tb_bukuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tb_buku.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tb_bukuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tb_bukuAggregateArgs>(args: Subset<T, Tb_bukuAggregateArgs>): PrismaPromise<GetTb_bukuAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for tb_buku.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tb_bukuClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tb_kategori<T extends tb_kategoriArgs = {}>(args?: Subset<T, tb_kategoriArgs>): CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori | null >, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T> | null >>;

    tb_rating<T extends tb_ratingArgs = {}>(args?: Subset<T, tb_ratingArgs>): CheckSelect<T, Prisma__tb_ratingClient<tb_rating | null >, Prisma__tb_ratingClient<tb_ratingGetPayload<T> | null >>;

    tb_user<T extends tb_userArgs = {}>(args?: Subset<T, tb_userArgs>): CheckSelect<T, Prisma__tb_userClient<tb_user | null >, Prisma__tb_userClient<tb_userGetPayload<T> | null >>;

    tb_rating_tb_bukuTotb_rating_id_buku<T extends tb_ratingFindManyArgs = {}>(args?: Subset<T, tb_ratingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tb_rating>>, PrismaPromise<Array<tb_ratingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tb_buku findUnique
   */
  export type tb_bukuFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * Throw an Error if a tb_buku can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_buku to fetch.
    **/
    where: tb_bukuWhereUniqueInput
  }


  /**
   * tb_buku findFirst
   */
  export type tb_bukuFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * Throw an Error if a tb_buku can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_buku to fetch.
    **/
    where?: tb_bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_bukus to fetch.
    **/
    orderBy?: Enumerable<tb_bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tb_bukus.
    **/
    cursor?: tb_bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_bukus.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tb_bukus.
    **/
    distinct?: Enumerable<Tb_bukuScalarFieldEnum>
  }


  /**
   * tb_buku findMany
   */
  export type tb_bukuFindManyArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * Filter, which tb_bukus to fetch.
    **/
    where?: tb_bukuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_bukus to fetch.
    **/
    orderBy?: Enumerable<tb_bukuOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tb_bukus.
    **/
    cursor?: tb_bukuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_bukus from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_bukus.
    **/
    skip?: number
    distinct?: Enumerable<Tb_bukuScalarFieldEnum>
  }


  /**
   * tb_buku create
   */
  export type tb_bukuCreateArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * The data needed to create a tb_buku.
    **/
    data: XOR<tb_bukuCreateInput, tb_bukuUncheckedCreateInput>
  }


  /**
   * tb_buku update
   */
  export type tb_bukuUpdateArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * The data needed to update a tb_buku.
    **/
    data: XOR<tb_bukuUpdateInput, tb_bukuUncheckedUpdateInput>
    /**
     * Choose, which tb_buku to update.
    **/
    where: tb_bukuWhereUniqueInput
  }


  /**
   * tb_buku updateMany
   */
  export type tb_bukuUpdateManyArgs = {
    data: XOR<tb_bukuUpdateManyMutationInput, tb_bukuUncheckedUpdateManyInput>
    where?: tb_bukuWhereInput
  }


  /**
   * tb_buku upsert
   */
  export type tb_bukuUpsertArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * The filter to search for the tb_buku to update in case it exists.
    **/
    where: tb_bukuWhereUniqueInput
    /**
     * In case the tb_buku found by the `where` argument doesn't exist, create a new tb_buku with this data.
    **/
    create: XOR<tb_bukuCreateInput, tb_bukuUncheckedCreateInput>
    /**
     * In case the tb_buku was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<tb_bukuUpdateInput, tb_bukuUncheckedUpdateInput>
  }


  /**
   * tb_buku delete
   */
  export type tb_bukuDeleteArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
    /**
     * Filter which tb_buku to delete.
    **/
    where: tb_bukuWhereUniqueInput
  }


  /**
   * tb_buku deleteMany
   */
  export type tb_bukuDeleteManyArgs = {
    where?: tb_bukuWhereInput
  }


  /**
   * tb_buku without action
   */
  export type tb_bukuArgs = {
    /**
     * Select specific fields to fetch from the tb_buku
    **/
    select?: tb_bukuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_bukuInclude | null
  }



  /**
   * Model tb_kategori
   */


  export type AggregateTb_kategori = {
    count: Tb_kategoriCountAggregateOutputType | null
    avg: Tb_kategoriAvgAggregateOutputType | null
    sum: Tb_kategoriSumAggregateOutputType | null
    min: Tb_kategoriMinAggregateOutputType | null
    max: Tb_kategoriMaxAggregateOutputType | null
  }

  export type Tb_kategoriAvgAggregateOutputType = {
    id_kategori: number
  }

  export type Tb_kategoriSumAggregateOutputType = {
    id_kategori: number
  }

  export type Tb_kategoriMinAggregateOutputType = {
    id_kategori: number
    nama_kategori: string | null
    img_kategori: string | null
  }

  export type Tb_kategoriMaxAggregateOutputType = {
    id_kategori: number
    nama_kategori: string | null
    img_kategori: string | null
  }

  export type Tb_kategoriCountAggregateOutputType = {
    id_kategori: number
    nama_kategori: number | null
    img_kategori: number | null
    _all: number
  }


  export type Tb_kategoriAvgAggregateInputType = {
    id_kategori?: true
  }

  export type Tb_kategoriSumAggregateInputType = {
    id_kategori?: true
  }

  export type Tb_kategoriMinAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
    img_kategori?: true
  }

  export type Tb_kategoriMaxAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
    img_kategori?: true
  }

  export type Tb_kategoriCountAggregateInputType = {
    id_kategori?: true
    nama_kategori?: true
    img_kategori?: true
    _all?: true
  }

  export type Tb_kategoriAggregateArgs = {
    /**
     * Filter which tb_kategori to aggregate.
    **/
    where?: tb_kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_kategoris to fetch.
    **/
    orderBy?: Enumerable<tb_kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: tb_kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tb_kategoris
    **/
    count?: true | Tb_kategoriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Tb_kategoriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Tb_kategoriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Tb_kategoriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Tb_kategoriMaxAggregateInputType
  }

  export type GetTb_kategoriAggregateType<T extends Tb_kategoriAggregateArgs> = {
    [P in keyof T & keyof AggregateTb_kategori]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTb_kategori[P]>
      : GetScalarType<T[P], AggregateTb_kategori[P]>
  }



  export type tb_kategoriSelect = {
    id_kategori?: boolean
    nama_kategori?: boolean
    img_kategori?: boolean
    tb_buku?: boolean | tb_bukuFindManyArgs
  }

  export type tb_kategoriInclude = {
    tb_buku?: boolean | tb_bukuFindManyArgs
  }

  export type tb_kategoriGetPayload<
    S extends boolean | null | undefined | tb_kategoriArgs,
    U = keyof S
      > = S extends true
        ? tb_kategori
    : S extends undefined
    ? never
    : S extends tb_kategoriArgs | tb_kategoriFindManyArgs
    ?'include' extends U
    ? tb_kategori  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof tb_kategori ?tb_kategori [P]
  : 
          P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['select'][P]>>  : never
  } 
    : tb_kategori
  : tb_kategori


  type tb_kategoriCountArgs = Merge<
    Omit<tb_kategoriFindManyArgs, 'select' | 'include'> & {
      select?: Tb_kategoriCountAggregateInputType | true
    }
  >

  export interface tb_kategoriDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tb_kategori that matches the filter.
     * @param {tb_kategoriFindUniqueArgs} args - Arguments to find a Tb_kategori
     * @example
     * // Get one Tb_kategori
     * const tb_kategori = await prisma.tb_kategori.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tb_kategoriFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tb_kategoriFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tb_kategori'> extends True ? CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>> : CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori | null >, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T> | null >>

    /**
     * Find the first Tb_kategori that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_kategoriFindFirstArgs} args - Arguments to find a Tb_kategori
     * @example
     * // Get one Tb_kategori
     * const tb_kategori = await prisma.tb_kategori.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tb_kategoriFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tb_kategoriFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tb_kategori'> extends True ? CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>> : CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori | null >, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T> | null >>

    /**
     * Find zero or more Tb_kategoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_kategoriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tb_kategoris
     * const tb_kategoris = await prisma.tb_kategori.findMany()
     * 
     * // Get first 10 Tb_kategoris
     * const tb_kategoris = await prisma.tb_kategori.findMany({ take: 10 })
     * 
     * // Only select the `id_kategori`
     * const tb_kategoriWithId_kategoriOnly = await prisma.tb_kategori.findMany({ select: { id_kategori: true } })
     * 
    **/
    findMany<T extends tb_kategoriFindManyArgs>(
      args?: SelectSubset<T, tb_kategoriFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tb_kategori>>, PrismaPromise<Array<tb_kategoriGetPayload<T>>>>

    /**
     * Create a Tb_kategori.
     * @param {tb_kategoriCreateArgs} args - Arguments to create a Tb_kategori.
     * @example
     * // Create one Tb_kategori
     * const Tb_kategori = await prisma.tb_kategori.create({
     *   data: {
     *     // ... data to create a Tb_kategori
     *   }
     * })
     * 
    **/
    create<T extends tb_kategoriCreateArgs>(
      args: SelectSubset<T, tb_kategoriCreateArgs>
    ): CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>>

    /**
     * Delete a Tb_kategori.
     * @param {tb_kategoriDeleteArgs} args - Arguments to delete one Tb_kategori.
     * @example
     * // Delete one Tb_kategori
     * const Tb_kategori = await prisma.tb_kategori.delete({
     *   where: {
     *     // ... filter to delete one Tb_kategori
     *   }
     * })
     * 
    **/
    delete<T extends tb_kategoriDeleteArgs>(
      args: SelectSubset<T, tb_kategoriDeleteArgs>
    ): CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>>

    /**
     * Update one Tb_kategori.
     * @param {tb_kategoriUpdateArgs} args - Arguments to update one Tb_kategori.
     * @example
     * // Update one Tb_kategori
     * const tb_kategori = await prisma.tb_kategori.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tb_kategoriUpdateArgs>(
      args: SelectSubset<T, tb_kategoriUpdateArgs>
    ): CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>>

    /**
     * Delete zero or more Tb_kategoris.
     * @param {tb_kategoriDeleteManyArgs} args - Arguments to filter Tb_kategoris to delete.
     * @example
     * // Delete a few Tb_kategoris
     * const { count } = await prisma.tb_kategori.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tb_kategoriDeleteManyArgs>(
      args?: SelectSubset<T, tb_kategoriDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tb_kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_kategoriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tb_kategoris
     * const tb_kategori = await prisma.tb_kategori.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tb_kategoriUpdateManyArgs>(
      args: SelectSubset<T, tb_kategoriUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tb_kategori.
     * @param {tb_kategoriUpsertArgs} args - Arguments to update or create a Tb_kategori.
     * @example
     * // Update or create a Tb_kategori
     * const tb_kategori = await prisma.tb_kategori.upsert({
     *   create: {
     *     // ... data to create a Tb_kategori
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tb_kategori we want to update
     *   }
     * })
    **/
    upsert<T extends tb_kategoriUpsertArgs>(
      args: SelectSubset<T, tb_kategoriUpsertArgs>
    ): CheckSelect<T, Prisma__tb_kategoriClient<tb_kategori>, Prisma__tb_kategoriClient<tb_kategoriGetPayload<T>>>

    /**
     * Count the number of Tb_kategoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_kategoriCountArgs} args - Arguments to filter Tb_kategoris to count.
     * @example
     * // Count the number of Tb_kategoris
     * const count = await prisma.tb_kategori.count({
     *   where: {
     *     // ... the filter for the Tb_kategoris we want to count
     *   }
     * })
    **/
    count<T extends tb_kategoriCountArgs>(
      args?: Subset<T, tb_kategoriCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tb_kategoriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tb_kategori.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tb_kategoriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tb_kategoriAggregateArgs>(args: Subset<T, Tb_kategoriAggregateArgs>): PrismaPromise<GetTb_kategoriAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for tb_kategori.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tb_kategoriClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tb_buku<T extends tb_bukuFindManyArgs = {}>(args?: Subset<T, tb_bukuFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tb_buku>>, PrismaPromise<Array<tb_bukuGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tb_kategori findUnique
   */
  export type tb_kategoriFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * Throw an Error if a tb_kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_kategori to fetch.
    **/
    where: tb_kategoriWhereUniqueInput
  }


  /**
   * tb_kategori findFirst
   */
  export type tb_kategoriFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * Throw an Error if a tb_kategori can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_kategori to fetch.
    **/
    where?: tb_kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_kategoris to fetch.
    **/
    orderBy?: Enumerable<tb_kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tb_kategoris.
    **/
    cursor?: tb_kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_kategoris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tb_kategoris.
    **/
    distinct?: Enumerable<Tb_kategoriScalarFieldEnum>
  }


  /**
   * tb_kategori findMany
   */
  export type tb_kategoriFindManyArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * Filter, which tb_kategoris to fetch.
    **/
    where?: tb_kategoriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_kategoris to fetch.
    **/
    orderBy?: Enumerable<tb_kategoriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tb_kategoris.
    **/
    cursor?: tb_kategoriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_kategoris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_kategoris.
    **/
    skip?: number
    distinct?: Enumerable<Tb_kategoriScalarFieldEnum>
  }


  /**
   * tb_kategori create
   */
  export type tb_kategoriCreateArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * The data needed to create a tb_kategori.
    **/
    data: XOR<tb_kategoriCreateInput, tb_kategoriUncheckedCreateInput>
  }


  /**
   * tb_kategori update
   */
  export type tb_kategoriUpdateArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * The data needed to update a tb_kategori.
    **/
    data: XOR<tb_kategoriUpdateInput, tb_kategoriUncheckedUpdateInput>
    /**
     * Choose, which tb_kategori to update.
    **/
    where: tb_kategoriWhereUniqueInput
  }


  /**
   * tb_kategori updateMany
   */
  export type tb_kategoriUpdateManyArgs = {
    data: XOR<tb_kategoriUpdateManyMutationInput, tb_kategoriUncheckedUpdateManyInput>
    where?: tb_kategoriWhereInput
  }


  /**
   * tb_kategori upsert
   */
  export type tb_kategoriUpsertArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * The filter to search for the tb_kategori to update in case it exists.
    **/
    where: tb_kategoriWhereUniqueInput
    /**
     * In case the tb_kategori found by the `where` argument doesn't exist, create a new tb_kategori with this data.
    **/
    create: XOR<tb_kategoriCreateInput, tb_kategoriUncheckedCreateInput>
    /**
     * In case the tb_kategori was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<tb_kategoriUpdateInput, tb_kategoriUncheckedUpdateInput>
  }


  /**
   * tb_kategori delete
   */
  export type tb_kategoriDeleteArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
    /**
     * Filter which tb_kategori to delete.
    **/
    where: tb_kategoriWhereUniqueInput
  }


  /**
   * tb_kategori deleteMany
   */
  export type tb_kategoriDeleteManyArgs = {
    where?: tb_kategoriWhereInput
  }


  /**
   * tb_kategori without action
   */
  export type tb_kategoriArgs = {
    /**
     * Select specific fields to fetch from the tb_kategori
    **/
    select?: tb_kategoriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_kategoriInclude | null
  }



  /**
   * Model tb_rating
   */


  export type AggregateTb_rating = {
    count: Tb_ratingCountAggregateOutputType | null
    avg: Tb_ratingAvgAggregateOutputType | null
    sum: Tb_ratingSumAggregateOutputType | null
    min: Tb_ratingMinAggregateOutputType | null
    max: Tb_ratingMaxAggregateOutputType | null
  }

  export type Tb_ratingAvgAggregateOutputType = {
    id_rating: number
    rating: number
    id_buku: number | null
    id_user: number | null
  }

  export type Tb_ratingSumAggregateOutputType = {
    id_rating: number
    rating: number
    id_buku: number | null
    id_user: number | null
  }

  export type Tb_ratingMinAggregateOutputType = {
    id_rating: number
    rating: number
    id_buku: number | null
    id_user: number | null
    komentar: string | null
  }

  export type Tb_ratingMaxAggregateOutputType = {
    id_rating: number
    rating: number
    id_buku: number | null
    id_user: number | null
    komentar: string | null
  }

  export type Tb_ratingCountAggregateOutputType = {
    id_rating: number
    rating: number
    id_buku: number | null
    id_user: number | null
    komentar: number | null
    _all: number
  }


  export type Tb_ratingAvgAggregateInputType = {
    id_rating?: true
    rating?: true
    id_buku?: true
    id_user?: true
  }

  export type Tb_ratingSumAggregateInputType = {
    id_rating?: true
    rating?: true
    id_buku?: true
    id_user?: true
  }

  export type Tb_ratingMinAggregateInputType = {
    id_rating?: true
    rating?: true
    id_buku?: true
    id_user?: true
    komentar?: true
  }

  export type Tb_ratingMaxAggregateInputType = {
    id_rating?: true
    rating?: true
    id_buku?: true
    id_user?: true
    komentar?: true
  }

  export type Tb_ratingCountAggregateInputType = {
    id_rating?: true
    rating?: true
    id_buku?: true
    id_user?: true
    komentar?: true
    _all?: true
  }

  export type Tb_ratingAggregateArgs = {
    /**
     * Filter which tb_rating to aggregate.
    **/
    where?: tb_ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_ratings to fetch.
    **/
    orderBy?: Enumerable<tb_ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: tb_ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tb_ratings
    **/
    count?: true | Tb_ratingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Tb_ratingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Tb_ratingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Tb_ratingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Tb_ratingMaxAggregateInputType
  }

  export type GetTb_ratingAggregateType<T extends Tb_ratingAggregateArgs> = {
    [P in keyof T & keyof AggregateTb_rating]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTb_rating[P]>
      : GetScalarType<T[P], AggregateTb_rating[P]>
  }



  export type tb_ratingSelect = {
    id_rating?: boolean
    rating?: boolean
    id_buku?: boolean
    id_user?: boolean
    komentar?: boolean
    tb_buku_tb_bukuTotb_rating_id_buku?: boolean | tb_bukuArgs
    tb_user?: boolean | tb_userArgs
    tb_buku?: boolean | tb_bukuFindManyArgs
  }

  export type tb_ratingInclude = {
    tb_buku_tb_bukuTotb_rating_id_buku?: boolean | tb_bukuArgs
    tb_user?: boolean | tb_userArgs
    tb_buku?: boolean | tb_bukuFindManyArgs
  }

  export type tb_ratingGetPayload<
    S extends boolean | null | undefined | tb_ratingArgs,
    U = keyof S
      > = S extends true
        ? tb_rating
    : S extends undefined
    ? never
    : S extends tb_ratingArgs | tb_ratingFindManyArgs
    ?'include' extends U
    ? tb_rating  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'tb_buku_tb_bukuTotb_rating_id_buku'
        ? tb_bukuGetPayload<S['include'][P]> | null :
        P extends 'tb_user'
        ? tb_userGetPayload<S['include'][P]> | null :
        P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof tb_rating ?tb_rating [P]
  : 
          P extends 'tb_buku_tb_bukuTotb_rating_id_buku'
        ? tb_bukuGetPayload<S['select'][P]> | null :
        P extends 'tb_user'
        ? tb_userGetPayload<S['select'][P]> | null :
        P extends 'tb_buku'
        ? Array < tb_bukuGetPayload<S['select'][P]>>  : never
  } 
    : tb_rating
  : tb_rating


  type tb_ratingCountArgs = Merge<
    Omit<tb_ratingFindManyArgs, 'select' | 'include'> & {
      select?: Tb_ratingCountAggregateInputType | true
    }
  >

  export interface tb_ratingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tb_rating that matches the filter.
     * @param {tb_ratingFindUniqueArgs} args - Arguments to find a Tb_rating
     * @example
     * // Get one Tb_rating
     * const tb_rating = await prisma.tb_rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tb_ratingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tb_ratingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tb_rating'> extends True ? CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>> : CheckSelect<T, Prisma__tb_ratingClient<tb_rating | null >, Prisma__tb_ratingClient<tb_ratingGetPayload<T> | null >>

    /**
     * Find the first Tb_rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_ratingFindFirstArgs} args - Arguments to find a Tb_rating
     * @example
     * // Get one Tb_rating
     * const tb_rating = await prisma.tb_rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tb_ratingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tb_ratingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tb_rating'> extends True ? CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>> : CheckSelect<T, Prisma__tb_ratingClient<tb_rating | null >, Prisma__tb_ratingClient<tb_ratingGetPayload<T> | null >>

    /**
     * Find zero or more Tb_ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_ratingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tb_ratings
     * const tb_ratings = await prisma.tb_rating.findMany()
     * 
     * // Get first 10 Tb_ratings
     * const tb_ratings = await prisma.tb_rating.findMany({ take: 10 })
     * 
     * // Only select the `id_rating`
     * const tb_ratingWithId_ratingOnly = await prisma.tb_rating.findMany({ select: { id_rating: true } })
     * 
    **/
    findMany<T extends tb_ratingFindManyArgs>(
      args?: SelectSubset<T, tb_ratingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tb_rating>>, PrismaPromise<Array<tb_ratingGetPayload<T>>>>

    /**
     * Create a Tb_rating.
     * @param {tb_ratingCreateArgs} args - Arguments to create a Tb_rating.
     * @example
     * // Create one Tb_rating
     * const Tb_rating = await prisma.tb_rating.create({
     *   data: {
     *     // ... data to create a Tb_rating
     *   }
     * })
     * 
    **/
    create<T extends tb_ratingCreateArgs>(
      args: SelectSubset<T, tb_ratingCreateArgs>
    ): CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>>

    /**
     * Delete a Tb_rating.
     * @param {tb_ratingDeleteArgs} args - Arguments to delete one Tb_rating.
     * @example
     * // Delete one Tb_rating
     * const Tb_rating = await prisma.tb_rating.delete({
     *   where: {
     *     // ... filter to delete one Tb_rating
     *   }
     * })
     * 
    **/
    delete<T extends tb_ratingDeleteArgs>(
      args: SelectSubset<T, tb_ratingDeleteArgs>
    ): CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>>

    /**
     * Update one Tb_rating.
     * @param {tb_ratingUpdateArgs} args - Arguments to update one Tb_rating.
     * @example
     * // Update one Tb_rating
     * const tb_rating = await prisma.tb_rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tb_ratingUpdateArgs>(
      args: SelectSubset<T, tb_ratingUpdateArgs>
    ): CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>>

    /**
     * Delete zero or more Tb_ratings.
     * @param {tb_ratingDeleteManyArgs} args - Arguments to filter Tb_ratings to delete.
     * @example
     * // Delete a few Tb_ratings
     * const { count } = await prisma.tb_rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tb_ratingDeleteManyArgs>(
      args?: SelectSubset<T, tb_ratingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tb_ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tb_ratings
     * const tb_rating = await prisma.tb_rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tb_ratingUpdateManyArgs>(
      args: SelectSubset<T, tb_ratingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tb_rating.
     * @param {tb_ratingUpsertArgs} args - Arguments to update or create a Tb_rating.
     * @example
     * // Update or create a Tb_rating
     * const tb_rating = await prisma.tb_rating.upsert({
     *   create: {
     *     // ... data to create a Tb_rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tb_rating we want to update
     *   }
     * })
    **/
    upsert<T extends tb_ratingUpsertArgs>(
      args: SelectSubset<T, tb_ratingUpsertArgs>
    ): CheckSelect<T, Prisma__tb_ratingClient<tb_rating>, Prisma__tb_ratingClient<tb_ratingGetPayload<T>>>

    /**
     * Count the number of Tb_ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tb_ratingCountArgs} args - Arguments to filter Tb_ratings to count.
     * @example
     * // Count the number of Tb_ratings
     * const count = await prisma.tb_rating.count({
     *   where: {
     *     // ... the filter for the Tb_ratings we want to count
     *   }
     * })
    **/
    count<T extends tb_ratingCountArgs>(
      args?: Subset<T, tb_ratingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tb_ratingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tb_rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tb_ratingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tb_ratingAggregateArgs>(args: Subset<T, Tb_ratingAggregateArgs>): PrismaPromise<GetTb_ratingAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for tb_rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tb_ratingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tb_buku_tb_bukuTotb_rating_id_buku<T extends tb_bukuArgs = {}>(args?: Subset<T, tb_bukuArgs>): CheckSelect<T, Prisma__tb_bukuClient<tb_buku | null >, Prisma__tb_bukuClient<tb_bukuGetPayload<T> | null >>;

    tb_user<T extends tb_userArgs = {}>(args?: Subset<T, tb_userArgs>): CheckSelect<T, Prisma__tb_userClient<tb_user | null >, Prisma__tb_userClient<tb_userGetPayload<T> | null >>;

    tb_buku<T extends tb_bukuFindManyArgs = {}>(args?: Subset<T, tb_bukuFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tb_buku>>, PrismaPromise<Array<tb_bukuGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tb_rating findUnique
   */
  export type tb_ratingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * Throw an Error if a tb_rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_rating to fetch.
    **/
    where: tb_ratingWhereUniqueInput
  }


  /**
   * tb_rating findFirst
   */
  export type tb_ratingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * Throw an Error if a tb_rating can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tb_rating to fetch.
    **/
    where?: tb_ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_ratings to fetch.
    **/
    orderBy?: Enumerable<tb_ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tb_ratings.
    **/
    cursor?: tb_ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_ratings.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tb_ratings.
    **/
    distinct?: Enumerable<Tb_ratingScalarFieldEnum>
  }


  /**
   * tb_rating findMany
   */
  export type tb_ratingFindManyArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * Filter, which tb_ratings to fetch.
    **/
    where?: tb_ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tb_ratings to fetch.
    **/
    orderBy?: Enumerable<tb_ratingOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tb_ratings.
    **/
    cursor?: tb_ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tb_ratings from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tb_ratings.
    **/
    skip?: number
    distinct?: Enumerable<Tb_ratingScalarFieldEnum>
  }


  /**
   * tb_rating create
   */
  export type tb_ratingCreateArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * The data needed to create a tb_rating.
    **/
    data: XOR<tb_ratingCreateInput, tb_ratingUncheckedCreateInput>
  }


  /**
   * tb_rating update
   */
  export type tb_ratingUpdateArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * The data needed to update a tb_rating.
    **/
    data: XOR<tb_ratingUpdateInput, tb_ratingUncheckedUpdateInput>
    /**
     * Choose, which tb_rating to update.
    **/
    where: tb_ratingWhereUniqueInput
  }


  /**
   * tb_rating updateMany
   */
  export type tb_ratingUpdateManyArgs = {
    data: XOR<tb_ratingUpdateManyMutationInput, tb_ratingUncheckedUpdateManyInput>
    where?: tb_ratingWhereInput
  }


  /**
   * tb_rating upsert
   */
  export type tb_ratingUpsertArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * The filter to search for the tb_rating to update in case it exists.
    **/
    where: tb_ratingWhereUniqueInput
    /**
     * In case the tb_rating found by the `where` argument doesn't exist, create a new tb_rating with this data.
    **/
    create: XOR<tb_ratingCreateInput, tb_ratingUncheckedCreateInput>
    /**
     * In case the tb_rating was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<tb_ratingUpdateInput, tb_ratingUncheckedUpdateInput>
  }


  /**
   * tb_rating delete
   */
  export type tb_ratingDeleteArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
    /**
     * Filter which tb_rating to delete.
    **/
    where: tb_ratingWhereUniqueInput
  }


  /**
   * tb_rating deleteMany
   */
  export type tb_ratingDeleteManyArgs = {
    where?: tb_ratingWhereInput
  }


  /**
   * tb_rating without action
   */
  export type tb_ratingArgs = {
    /**
     * Select specific fields to fetch from the tb_rating
    **/
    select?: tb_ratingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: tb_ratingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Tb_userScalarFieldEnum: {
    id_user: 'id_user',
    fullname: 'fullname',
    username: 'username',
    gender: 'gender',
    alamat: 'alamat',
    email: 'email',
    password: 'password',
    img_profil: 'img_profil'
  };

  export type Tb_userScalarFieldEnum = (typeof Tb_userScalarFieldEnum)[keyof typeof Tb_userScalarFieldEnum]


  export const Tb_bukuScalarFieldEnum: {
    id_user: 'id_user',
    judul_buku: 'judul_buku',
    pengarang: 'pengarang',
    publisher: 'publisher',
    isbn: 'isbn',
    pages: 'pages',
    img_buku: 'img_buku',
    id_kategori: 'id_kategori',
    id_buku: 'id_buku',
    id_rating: 'id_rating'
  };

  export type Tb_bukuScalarFieldEnum = (typeof Tb_bukuScalarFieldEnum)[keyof typeof Tb_bukuScalarFieldEnum]


  export const Tb_kategoriScalarFieldEnum: {
    id_kategori: 'id_kategori',
    nama_kategori: 'nama_kategori',
    img_kategori: 'img_kategori'
  };

  export type Tb_kategoriScalarFieldEnum = (typeof Tb_kategoriScalarFieldEnum)[keyof typeof Tb_kategoriScalarFieldEnum]


  export const Tb_ratingScalarFieldEnum: {
    id_rating: 'id_rating',
    rating: 'rating',
    id_buku: 'id_buku',
    id_user: 'id_user',
    komentar: 'komentar'
  };

  export type Tb_ratingScalarFieldEnum = (typeof Tb_ratingScalarFieldEnum)[keyof typeof Tb_ratingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type tb_userWhereInput = {
    AND?: Enumerable<tb_userWhereInput>
    OR?: Enumerable<tb_userWhereInput>
    NOT?: Enumerable<tb_userWhereInput>
    id_user?: IntFilter | number
    fullname?: StringFilter | string
    username?: StringFilter | string
    gender?: StringFilter | string
    alamat?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    img_profil?: StringFilter | string
    tb_buku?: Tb_bukuListRelationFilter
    tb_rating?: Tb_ratingListRelationFilter
  }

  export type tb_userOrderByInput = {
    id_user?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    gender?: SortOrder
    alamat?: SortOrder
    email?: SortOrder
    password?: SortOrder
    img_profil?: SortOrder
  }

  export type tb_userWhereUniqueInput = {
    id_user?: number
  }

  export type tb_bukuWhereInput = {
    AND?: Enumerable<tb_bukuWhereInput>
    OR?: Enumerable<tb_bukuWhereInput>
    NOT?: Enumerable<tb_bukuWhereInput>
    id_user?: IntFilter | number
    judul_buku?: StringFilter | string
    pengarang?: StringFilter | string
    publisher?: StringFilter | string
    isbn?: IntFilter | number
    pages?: IntFilter | number
    img_buku?: StringFilter | string
    id_kategori?: IntNullableFilter | number | null
    id_buku?: IntFilter | number
    id_rating?: IntNullableFilter | number | null
    tb_kategori?: XOR<Tb_kategoriRelationFilter, tb_kategoriWhereInput> | null
    tb_rating?: XOR<Tb_ratingRelationFilter, tb_ratingWhereInput> | null
    tb_user?: XOR<Tb_userRelationFilter, tb_userWhereInput>
    tb_rating_tb_bukuTotb_rating_id_buku?: Tb_ratingListRelationFilter
  }

  export type tb_bukuOrderByInput = {
    id_user?: SortOrder
    judul_buku?: SortOrder
    pengarang?: SortOrder
    publisher?: SortOrder
    isbn?: SortOrder
    pages?: SortOrder
    img_buku?: SortOrder
    id_kategori?: SortOrder
    id_buku?: SortOrder
    id_rating?: SortOrder
    tb_kategori?: tb_kategoriOrderByInput
    tb_rating?: tb_ratingOrderByInput
    tb_user?: tb_userOrderByInput
  }

  export type tb_bukuWhereUniqueInput = {
    id_buku?: number
  }

  export type tb_kategoriWhereInput = {
    AND?: Enumerable<tb_kategoriWhereInput>
    OR?: Enumerable<tb_kategoriWhereInput>
    NOT?: Enumerable<tb_kategoriWhereInput>
    id_kategori?: IntFilter | number
    nama_kategori?: StringFilter | string
    img_kategori?: StringFilter | string
    tb_buku?: Tb_bukuListRelationFilter
  }

  export type tb_kategoriOrderByInput = {
    id_kategori?: SortOrder
    nama_kategori?: SortOrder
    img_kategori?: SortOrder
  }

  export type tb_kategoriWhereUniqueInput = {
    id_kategori?: number
  }

  export type tb_ratingWhereInput = {
    AND?: Enumerable<tb_ratingWhereInput>
    OR?: Enumerable<tb_ratingWhereInput>
    NOT?: Enumerable<tb_ratingWhereInput>
    id_rating?: IntFilter | number
    rating?: IntFilter | number
    id_buku?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
    komentar?: StringNullableFilter | string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: XOR<Tb_bukuRelationFilter, tb_bukuWhereInput> | null
    tb_user?: XOR<Tb_userRelationFilter, tb_userWhereInput> | null
    tb_buku?: Tb_bukuListRelationFilter
  }

  export type tb_ratingOrderByInput = {
    id_rating?: SortOrder
    rating?: SortOrder
    id_buku?: SortOrder
    id_user?: SortOrder
    komentar?: SortOrder
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuOrderByInput
    tb_user?: tb_userOrderByInput
  }

  export type tb_ratingWhereUniqueInput = {
    id_rating?: number
  }

  export type tb_userCreateInput = {
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_userInput
    tb_rating?: tb_ratingCreateNestedManyWithoutTb_userInput
  }

  export type tb_userUncheckedCreateInput = {
    id_user?: number
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_userInput
    tb_rating?: tb_ratingUncheckedCreateNestedManyWithoutTb_userInput
  }

  export type tb_userUpdateInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUpdateManyWithoutTb_userInput
    tb_rating?: tb_ratingUpdateManyWithoutTb_userInput
  }

  export type tb_userUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_userInput
    tb_rating?: tb_ratingUncheckedUpdateManyWithoutTb_userInput
  }

  export type tb_userUpdateManyMutationInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
  }

  export type tb_userUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
  }

  export type tb_bukuCreateInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    tb_kategori?: tb_kategoriCreateNestedOneWithoutTb_bukuInput
    tb_rating?: tb_ratingCreateNestedOneWithoutTb_bukuInput
    tb_user: tb_userCreateNestedOneWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedCreateInput = {
    id_user: number
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    id_kategori?: number | null
    id_buku?: number
    id_rating?: number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUpdateInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    tb_kategori?: tb_kategoriUpdateOneWithoutTb_bukuInput
    tb_rating?: tb_ratingUpdateOneWithoutTb_bukuInput
    tb_user?: tb_userUpdateOneRequiredWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUpdateManyMutationInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
  }

  export type tb_bukuUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tb_kategoriCreateInput = {
    nama_kategori: string
    img_kategori: string
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_kategoriInput
  }

  export type tb_kategoriUncheckedCreateInput = {
    id_kategori?: number
    nama_kategori: string
    img_kategori: string
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_kategoriInput
  }

  export type tb_kategoriUpdateInput = {
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUpdateManyWithoutTb_kategoriInput
  }

  export type tb_kategoriUncheckedUpdateInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_kategoriInput
  }

  export type tb_kategoriUpdateManyMutationInput = {
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type tb_kategoriUncheckedUpdateManyInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type tb_ratingCreateInput = {
    rating: number
    komentar?: string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuCreateNestedOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_user?: tb_userCreateNestedOneWithoutTb_ratingInput
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedCreateInput = {
    id_rating?: number
    rating: number
    id_buku?: number | null
    id_user?: number | null
    komentar?: string | null
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuUpdateOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_user?: tb_userUpdateOneWithoutTb_ratingInput
    tb_buku?: tb_bukuUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_buku?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tb_ratingUncheckedUpdateManyInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_buku?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type Tb_bukuListRelationFilter = {
    every?: tb_bukuWhereInput
    some?: tb_bukuWhereInput
    none?: tb_bukuWhereInput
  }

  export type Tb_ratingListRelationFilter = {
    every?: tb_ratingWhereInput
    some?: tb_ratingWhereInput
    none?: tb_ratingWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Tb_kategoriRelationFilter = {
    is?: tb_kategoriWhereInput | null
    isNot?: tb_kategoriWhereInput | null
  }

  export type Tb_ratingRelationFilter = {
    is?: tb_ratingWhereInput | null
    isNot?: tb_ratingWhereInput | null
  }

  export type Tb_userRelationFilter = {
    is?: tb_userWhereInput | null
    isNot?: tb_userWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type Tb_bukuRelationFilter = {
    is?: tb_bukuWhereInput | null
    isNot?: tb_bukuWhereInput | null
  }

  export type tb_bukuCreateNestedManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_userInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_userInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type tb_ratingCreateNestedManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_userInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_userInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
  }

  export type tb_bukuUncheckedCreateNestedManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_userInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_userInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type tb_ratingUncheckedCreateNestedManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_userInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_userInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type tb_bukuUpdateManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_userInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_userInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_userInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_userInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_userInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type tb_ratingUpdateManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_userInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_userInput>
    upsert?: Enumerable<tb_ratingUpsertWithWhereUniqueWithoutTb_userInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
    set?: Enumerable<tb_ratingWhereUniqueInput>
    disconnect?: Enumerable<tb_ratingWhereUniqueInput>
    delete?: Enumerable<tb_ratingWhereUniqueInput>
    update?: Enumerable<tb_ratingUpdateWithWhereUniqueWithoutTb_userInput>
    updateMany?: Enumerable<tb_ratingUpdateManyWithWhereWithoutTb_userInput>
    deleteMany?: Enumerable<tb_ratingScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tb_bukuUncheckedUpdateManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_userInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_userInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_userInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_userInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_userInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type tb_ratingUncheckedUpdateManyWithoutTb_userInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_userInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_userInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_userInput>
    upsert?: Enumerable<tb_ratingUpsertWithWhereUniqueWithoutTb_userInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
    set?: Enumerable<tb_ratingWhereUniqueInput>
    disconnect?: Enumerable<tb_ratingWhereUniqueInput>
    delete?: Enumerable<tb_ratingWhereUniqueInput>
    update?: Enumerable<tb_ratingUpdateWithWhereUniqueWithoutTb_userInput>
    updateMany?: Enumerable<tb_ratingUpdateManyWithWhereWithoutTb_userInput>
    deleteMany?: Enumerable<tb_ratingScalarWhereInput>
  }

  export type tb_kategoriCreateNestedOneWithoutTb_bukuInput = {
    create?: XOR<tb_kategoriCreateWithoutTb_bukuInput, tb_kategoriUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_kategoriCreateOrConnectWithoutTb_bukuInput
    connect?: tb_kategoriWhereUniqueInput
  }

  export type tb_ratingCreateNestedOneWithoutTb_bukuInput = {
    create?: XOR<tb_ratingCreateWithoutTb_bukuInput, tb_ratingUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_ratingCreateOrConnectWithoutTb_bukuInput
    connect?: tb_ratingWhereUniqueInput
  }

  export type tb_userCreateNestedOneWithoutTb_bukuInput = {
    create?: XOR<tb_userCreateWithoutTb_bukuInput, tb_userUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_userCreateOrConnectWithoutTb_bukuInput
    connect?: tb_userWhereUniqueInput
  }

  export type tb_ratingCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
  }

  export type tb_ratingUncheckedCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
  }

  export type tb_kategoriUpdateOneWithoutTb_bukuInput = {
    create?: XOR<tb_kategoriCreateWithoutTb_bukuInput, tb_kategoriUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_kategoriCreateOrConnectWithoutTb_bukuInput
    upsert?: tb_kategoriUpsertWithoutTb_bukuInput
    connect?: tb_kategoriWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<tb_kategoriUpdateWithoutTb_bukuInput, tb_kategoriUncheckedUpdateWithoutTb_bukuInput>
  }

  export type tb_ratingUpdateOneWithoutTb_bukuInput = {
    create?: XOR<tb_ratingCreateWithoutTb_bukuInput, tb_ratingUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_ratingCreateOrConnectWithoutTb_bukuInput
    upsert?: tb_ratingUpsertWithoutTb_bukuInput
    connect?: tb_ratingWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<tb_ratingUpdateWithoutTb_bukuInput, tb_ratingUncheckedUpdateWithoutTb_bukuInput>
  }

  export type tb_userUpdateOneRequiredWithoutTb_bukuInput = {
    create?: XOR<tb_userCreateWithoutTb_bukuInput, tb_userUncheckedCreateWithoutTb_bukuInput>
    connectOrCreate?: tb_userCreateOrConnectWithoutTb_bukuInput
    upsert?: tb_userUpsertWithoutTb_bukuInput
    connect?: tb_userWhereUniqueInput
    update?: XOR<tb_userUpdateWithoutTb_bukuInput, tb_userUncheckedUpdateWithoutTb_bukuInput>
  }

  export type tb_ratingUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    upsert?: Enumerable<tb_ratingUpsertWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
    set?: Enumerable<tb_ratingWhereUniqueInput>
    disconnect?: Enumerable<tb_ratingWhereUniqueInput>
    delete?: Enumerable<tb_ratingWhereUniqueInput>
    update?: Enumerable<tb_ratingUpdateWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    updateMany?: Enumerable<tb_ratingUpdateManyWithWhereWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    deleteMany?: Enumerable<tb_ratingScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tb_ratingUncheckedUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<Enumerable<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>, Enumerable<tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>>
    connectOrCreate?: Enumerable<tb_ratingCreateOrConnectWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    upsert?: Enumerable<tb_ratingUpsertWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    connect?: Enumerable<tb_ratingWhereUniqueInput>
    set?: Enumerable<tb_ratingWhereUniqueInput>
    disconnect?: Enumerable<tb_ratingWhereUniqueInput>
    delete?: Enumerable<tb_ratingWhereUniqueInput>
    update?: Enumerable<tb_ratingUpdateWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    updateMany?: Enumerable<tb_ratingUpdateManyWithWhereWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    deleteMany?: Enumerable<tb_ratingScalarWhereInput>
  }

  export type tb_bukuCreateNestedManyWithoutTb_kategoriInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_kategoriInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_kategoriInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_kategoriInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type tb_bukuUncheckedCreateNestedManyWithoutTb_kategoriInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_kategoriInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_kategoriInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_kategoriInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type tb_bukuUpdateManyWithoutTb_kategoriInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_kategoriInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_kategoriInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_kategoriInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_kategoriInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_kategoriInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_kategoriInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type tb_bukuUncheckedUpdateManyWithoutTb_kategoriInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_kategoriInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_kategoriInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_kategoriInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_kategoriInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_kategoriInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_kategoriInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type tb_bukuCreateNestedOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<tb_bukuCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
    connectOrCreate?: tb_bukuCreateOrConnectWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    connect?: tb_bukuWhereUniqueInput
  }

  export type tb_userCreateNestedOneWithoutTb_ratingInput = {
    create?: XOR<tb_userCreateWithoutTb_ratingInput, tb_userUncheckedCreateWithoutTb_ratingInput>
    connectOrCreate?: tb_userCreateOrConnectWithoutTb_ratingInput
    connect?: tb_userWhereUniqueInput
  }

  export type tb_bukuCreateNestedManyWithoutTb_ratingInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_ratingInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_ratingInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_ratingInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type tb_bukuUncheckedCreateNestedManyWithoutTb_ratingInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_ratingInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_ratingInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_ratingInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type tb_bukuUpdateOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    create?: XOR<tb_bukuCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
    connectOrCreate?: tb_bukuCreateOrConnectWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    upsert?: tb_bukuUpsertWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    connect?: tb_bukuWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<tb_bukuUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_userUpdateOneWithoutTb_ratingInput = {
    create?: XOR<tb_userCreateWithoutTb_ratingInput, tb_userUncheckedCreateWithoutTb_ratingInput>
    connectOrCreate?: tb_userCreateOrConnectWithoutTb_ratingInput
    upsert?: tb_userUpsertWithoutTb_ratingInput
    connect?: tb_userWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<tb_userUpdateWithoutTb_ratingInput, tb_userUncheckedUpdateWithoutTb_ratingInput>
  }

  export type tb_bukuUpdateManyWithoutTb_ratingInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_ratingInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_ratingInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_ratingInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_ratingInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_ratingInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_ratingInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type tb_bukuUncheckedUpdateManyWithoutTb_ratingInput = {
    create?: XOR<Enumerable<tb_bukuCreateWithoutTb_ratingInput>, Enumerable<tb_bukuUncheckedCreateWithoutTb_ratingInput>>
    connectOrCreate?: Enumerable<tb_bukuCreateOrConnectWithoutTb_ratingInput>
    upsert?: Enumerable<tb_bukuUpsertWithWhereUniqueWithoutTb_ratingInput>
    connect?: Enumerable<tb_bukuWhereUniqueInput>
    set?: Enumerable<tb_bukuWhereUniqueInput>
    disconnect?: Enumerable<tb_bukuWhereUniqueInput>
    delete?: Enumerable<tb_bukuWhereUniqueInput>
    update?: Enumerable<tb_bukuUpdateWithWhereUniqueWithoutTb_ratingInput>
    updateMany?: Enumerable<tb_bukuUpdateManyWithWhereWithoutTb_ratingInput>
    deleteMany?: Enumerable<tb_bukuScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type tb_bukuCreateWithoutTb_userInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    tb_kategori?: tb_kategoriCreateNestedOneWithoutTb_bukuInput
    tb_rating?: tb_ratingCreateNestedOneWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedCreateWithoutTb_userInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    id_kategori?: number | null
    id_buku?: number
    id_rating?: number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuCreateOrConnectWithoutTb_userInput = {
    where: tb_bukuWhereUniqueInput
    create: XOR<tb_bukuCreateWithoutTb_userInput, tb_bukuUncheckedCreateWithoutTb_userInput>
  }

  export type tb_ratingCreateWithoutTb_userInput = {
    rating: number
    komentar?: string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuCreateNestedOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedCreateWithoutTb_userInput = {
    id_rating?: number
    rating: number
    id_buku?: number | null
    komentar?: string | null
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingCreateOrConnectWithoutTb_userInput = {
    where: tb_ratingWhereUniqueInput
    create: XOR<tb_ratingCreateWithoutTb_userInput, tb_ratingUncheckedCreateWithoutTb_userInput>
  }

  export type tb_bukuUpsertWithWhereUniqueWithoutTb_userInput = {
    where: tb_bukuWhereUniqueInput
    update: XOR<tb_bukuUpdateWithoutTb_userInput, tb_bukuUncheckedUpdateWithoutTb_userInput>
    create: XOR<tb_bukuCreateWithoutTb_userInput, tb_bukuUncheckedCreateWithoutTb_userInput>
  }

  export type tb_bukuUpdateWithWhereUniqueWithoutTb_userInput = {
    where: tb_bukuWhereUniqueInput
    data: XOR<tb_bukuUpdateWithoutTb_userInput, tb_bukuUncheckedUpdateWithoutTb_userInput>
  }

  export type tb_bukuUpdateManyWithWhereWithoutTb_userInput = {
    where: tb_bukuScalarWhereInput
    data: XOR<tb_bukuUpdateManyMutationInput, tb_bukuUncheckedUpdateManyWithoutTb_bukuInput>
  }

  export type tb_bukuScalarWhereInput = {
    AND?: Enumerable<tb_bukuScalarWhereInput>
    OR?: Enumerable<tb_bukuScalarWhereInput>
    NOT?: Enumerable<tb_bukuScalarWhereInput>
    id_user?: IntFilter | number
    judul_buku?: StringFilter | string
    pengarang?: StringFilter | string
    publisher?: StringFilter | string
    isbn?: IntFilter | number
    pages?: IntFilter | number
    img_buku?: StringFilter | string
    id_kategori?: IntNullableFilter | number | null
    id_buku?: IntFilter | number
    id_rating?: IntNullableFilter | number | null
  }

  export type tb_ratingUpsertWithWhereUniqueWithoutTb_userInput = {
    where: tb_ratingWhereUniqueInput
    update: XOR<tb_ratingUpdateWithoutTb_userInput, tb_ratingUncheckedUpdateWithoutTb_userInput>
    create: XOR<tb_ratingCreateWithoutTb_userInput, tb_ratingUncheckedCreateWithoutTb_userInput>
  }

  export type tb_ratingUpdateWithWhereUniqueWithoutTb_userInput = {
    where: tb_ratingWhereUniqueInput
    data: XOR<tb_ratingUpdateWithoutTb_userInput, tb_ratingUncheckedUpdateWithoutTb_userInput>
  }

  export type tb_ratingUpdateManyWithWhereWithoutTb_userInput = {
    where: tb_ratingScalarWhereInput
    data: XOR<tb_ratingUpdateManyMutationInput, tb_ratingUncheckedUpdateManyWithoutTb_ratingInput>
  }

  export type tb_ratingScalarWhereInput = {
    AND?: Enumerable<tb_ratingScalarWhereInput>
    OR?: Enumerable<tb_ratingScalarWhereInput>
    NOT?: Enumerable<tb_ratingScalarWhereInput>
    id_rating?: IntFilter | number
    rating?: IntFilter | number
    id_buku?: IntNullableFilter | number | null
    id_user?: IntNullableFilter | number | null
    komentar?: StringNullableFilter | string | null
  }

  export type tb_kategoriCreateWithoutTb_bukuInput = {
    nama_kategori: string
    img_kategori: string
  }

  export type tb_kategoriUncheckedCreateWithoutTb_bukuInput = {
    id_kategori?: number
    nama_kategori: string
    img_kategori: string
  }

  export type tb_kategoriCreateOrConnectWithoutTb_bukuInput = {
    where: tb_kategoriWhereUniqueInput
    create: XOR<tb_kategoriCreateWithoutTb_bukuInput, tb_kategoriUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_ratingCreateWithoutTb_bukuInput = {
    rating: number
    komentar?: string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuCreateNestedOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_user?: tb_userCreateNestedOneWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedCreateWithoutTb_bukuInput = {
    id_rating?: number
    rating: number
    id_buku?: number | null
    id_user?: number | null
    komentar?: string | null
  }

  export type tb_ratingCreateOrConnectWithoutTb_bukuInput = {
    where: tb_ratingWhereUniqueInput
    create: XOR<tb_ratingCreateWithoutTb_bukuInput, tb_ratingUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_userCreateWithoutTb_bukuInput = {
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_rating?: tb_ratingCreateNestedManyWithoutTb_userInput
  }

  export type tb_userUncheckedCreateWithoutTb_bukuInput = {
    id_user?: number
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_rating?: tb_ratingUncheckedCreateNestedManyWithoutTb_userInput
  }

  export type tb_userCreateOrConnectWithoutTb_bukuInput = {
    where: tb_userWhereUniqueInput
    create: XOR<tb_userCreateWithoutTb_bukuInput, tb_userUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    rating: number
    komentar?: string | null
    tb_user?: tb_userCreateNestedOneWithoutTb_ratingInput
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    id_rating?: number
    rating: number
    id_user?: number | null
    komentar?: string | null
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_ratingInput
  }

  export type tb_ratingCreateOrConnectWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    where: tb_ratingWhereUniqueInput
    create: XOR<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput, tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_kategoriUpsertWithoutTb_bukuInput = {
    update: XOR<tb_kategoriUpdateWithoutTb_bukuInput, tb_kategoriUncheckedUpdateWithoutTb_bukuInput>
    create: XOR<tb_kategoriCreateWithoutTb_bukuInput, tb_kategoriUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_kategoriUpdateWithoutTb_bukuInput = {
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type tb_kategoriUncheckedUpdateWithoutTb_bukuInput = {
    id_kategori?: IntFieldUpdateOperationsInput | number
    nama_kategori?: StringFieldUpdateOperationsInput | string
    img_kategori?: StringFieldUpdateOperationsInput | string
  }

  export type tb_ratingUpsertWithoutTb_bukuInput = {
    update: XOR<tb_ratingUpdateWithoutTb_bukuInput, tb_ratingUncheckedUpdateWithoutTb_bukuInput>
    create: XOR<tb_ratingCreateWithoutTb_bukuInput, tb_ratingUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_ratingUpdateWithoutTb_bukuInput = {
    rating?: IntFieldUpdateOperationsInput | number
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuUpdateOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_user?: tb_userUpdateOneWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateWithoutTb_bukuInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_buku?: NullableIntFieldUpdateOperationsInput | number | null
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tb_userUpsertWithoutTb_bukuInput = {
    update: XOR<tb_userUpdateWithoutTb_bukuInput, tb_userUncheckedUpdateWithoutTb_bukuInput>
    create: XOR<tb_userCreateWithoutTb_bukuInput, tb_userUncheckedCreateWithoutTb_bukuInput>
  }

  export type tb_userUpdateWithoutTb_bukuInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_rating?: tb_ratingUpdateManyWithoutTb_userInput
  }

  export type tb_userUncheckedUpdateWithoutTb_bukuInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_rating?: tb_ratingUncheckedUpdateManyWithoutTb_userInput
  }

  export type tb_ratingUpsertWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    where: tb_ratingWhereUniqueInput
    update: XOR<tb_ratingUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput, tb_ratingUncheckedUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
    create: XOR<tb_ratingCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput, tb_ratingUncheckedCreateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_ratingUpdateWithWhereUniqueWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    where: tb_ratingWhereUniqueInput
    data: XOR<tb_ratingUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput, tb_ratingUncheckedUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_ratingUpdateManyWithWhereWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    where: tb_ratingScalarWhereInput
    data: XOR<tb_ratingUpdateManyMutationInput, tb_ratingUncheckedUpdateManyWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_bukuCreateWithoutTb_kategoriInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    tb_rating?: tb_ratingCreateNestedOneWithoutTb_bukuInput
    tb_user: tb_userCreateNestedOneWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedCreateWithoutTb_kategoriInput = {
    id_user: number
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    id_buku?: number
    id_rating?: number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuCreateOrConnectWithoutTb_kategoriInput = {
    where: tb_bukuWhereUniqueInput
    create: XOR<tb_bukuCreateWithoutTb_kategoriInput, tb_bukuUncheckedCreateWithoutTb_kategoriInput>
  }

  export type tb_bukuUpsertWithWhereUniqueWithoutTb_kategoriInput = {
    where: tb_bukuWhereUniqueInput
    update: XOR<tb_bukuUpdateWithoutTb_kategoriInput, tb_bukuUncheckedUpdateWithoutTb_kategoriInput>
    create: XOR<tb_bukuCreateWithoutTb_kategoriInput, tb_bukuUncheckedCreateWithoutTb_kategoriInput>
  }

  export type tb_bukuUpdateWithWhereUniqueWithoutTb_kategoriInput = {
    where: tb_bukuWhereUniqueInput
    data: XOR<tb_bukuUpdateWithoutTb_kategoriInput, tb_bukuUncheckedUpdateWithoutTb_kategoriInput>
  }

  export type tb_bukuUpdateManyWithWhereWithoutTb_kategoriInput = {
    where: tb_bukuScalarWhereInput
    data: XOR<tb_bukuUpdateManyMutationInput, tb_bukuUncheckedUpdateManyWithoutTb_bukuInput>
  }

  export type tb_bukuCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    tb_kategori?: tb_kategoriCreateNestedOneWithoutTb_bukuInput
    tb_rating?: tb_ratingCreateNestedOneWithoutTb_bukuInput
    tb_user: tb_userCreateNestedOneWithoutTb_bukuInput
  }

  export type tb_bukuUncheckedCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    id_user: number
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    id_kategori?: number | null
    id_buku?: number
    id_rating?: number | null
  }

  export type tb_bukuCreateOrConnectWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    where: tb_bukuWhereUniqueInput
    create: XOR<tb_bukuCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_userCreateWithoutTb_ratingInput = {
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_buku?: tb_bukuCreateNestedManyWithoutTb_userInput
  }

  export type tb_userUncheckedCreateWithoutTb_ratingInput = {
    id_user?: number
    fullname: string
    username: string
    gender: string
    alamat: string
    email: string
    password: string
    img_profil: string
    tb_buku?: tb_bukuUncheckedCreateNestedManyWithoutTb_userInput
  }

  export type tb_userCreateOrConnectWithoutTb_ratingInput = {
    where: tb_userWhereUniqueInput
    create: XOR<tb_userCreateWithoutTb_ratingInput, tb_userUncheckedCreateWithoutTb_ratingInput>
  }

  export type tb_bukuCreateWithoutTb_ratingInput = {
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    tb_kategori?: tb_kategoriCreateNestedOneWithoutTb_bukuInput
    tb_user: tb_userCreateNestedOneWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedCreateWithoutTb_ratingInput = {
    id_user: number
    judul_buku: string
    pengarang: string
    publisher: string
    isbn: number
    pages: number
    img_buku: string
    id_kategori?: number | null
    id_buku?: number
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedCreateNestedManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuCreateOrConnectWithoutTb_ratingInput = {
    where: tb_bukuWhereUniqueInput
    create: XOR<tb_bukuCreateWithoutTb_ratingInput, tb_bukuUncheckedCreateWithoutTb_ratingInput>
  }

  export type tb_bukuUpsertWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    update: XOR<tb_bukuUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
    create: XOR<tb_bukuCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput, tb_bukuUncheckedCreateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput>
  }

  export type tb_bukuUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    tb_kategori?: tb_kategoriUpdateOneWithoutTb_bukuInput
    tb_rating?: tb_ratingUpdateOneWithoutTb_bukuInput
    tb_user?: tb_userUpdateOneRequiredWithoutTb_bukuInput
  }

  export type tb_bukuUncheckedUpdateWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tb_userUpsertWithoutTb_ratingInput = {
    update: XOR<tb_userUpdateWithoutTb_ratingInput, tb_userUncheckedUpdateWithoutTb_ratingInput>
    create: XOR<tb_userCreateWithoutTb_ratingInput, tb_userUncheckedCreateWithoutTb_ratingInput>
  }

  export type tb_userUpdateWithoutTb_ratingInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUpdateManyWithoutTb_userInput
  }

  export type tb_userUncheckedUpdateWithoutTb_ratingInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    img_profil?: StringFieldUpdateOperationsInput | string
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_userInput
  }

  export type tb_bukuUpsertWithWhereUniqueWithoutTb_ratingInput = {
    where: tb_bukuWhereUniqueInput
    update: XOR<tb_bukuUpdateWithoutTb_ratingInput, tb_bukuUncheckedUpdateWithoutTb_ratingInput>
    create: XOR<tb_bukuCreateWithoutTb_ratingInput, tb_bukuUncheckedCreateWithoutTb_ratingInput>
  }

  export type tb_bukuUpdateWithWhereUniqueWithoutTb_ratingInput = {
    where: tb_bukuWhereUniqueInput
    data: XOR<tb_bukuUpdateWithoutTb_ratingInput, tb_bukuUncheckedUpdateWithoutTb_ratingInput>
  }

  export type tb_bukuUpdateManyWithWhereWithoutTb_ratingInput = {
    where: tb_bukuScalarWhereInput
    data: XOR<tb_bukuUpdateManyMutationInput, tb_bukuUncheckedUpdateManyWithoutTb_bukuInput>
  }

  export type tb_bukuUpdateWithoutTb_userInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    tb_kategori?: tb_kategoriUpdateOneWithoutTb_bukuInput
    tb_rating?: tb_ratingUpdateOneWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedUpdateWithoutTb_userInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedUpdateManyWithoutTb_bukuInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tb_ratingUpdateWithoutTb_userInput = {
    rating?: IntFieldUpdateOperationsInput | number
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku_tb_bukuTotb_rating_id_buku?: tb_bukuUpdateOneWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput
    tb_buku?: tb_bukuUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateWithoutTb_userInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_buku?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateManyWithoutTb_ratingInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_buku?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tb_ratingUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    rating?: IntFieldUpdateOperationsInput | number
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_user?: tb_userUpdateOneWithoutTb_ratingInput
    tb_buku?: tb_bukuUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
    tb_buku?: tb_bukuUncheckedUpdateManyWithoutTb_ratingInput
  }

  export type tb_ratingUncheckedUpdateManyWithoutTb_rating_tb_bukuTotb_rating_id_bukuInput = {
    id_rating?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    id_user?: NullableIntFieldUpdateOperationsInput | number | null
    komentar?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tb_bukuUpdateWithoutTb_kategoriInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    tb_rating?: tb_ratingUpdateOneWithoutTb_bukuInput
    tb_user?: tb_userUpdateOneRequiredWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedUpdateWithoutTb_kategoriInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_buku?: IntFieldUpdateOperationsInput | number
    id_rating?: NullableIntFieldUpdateOperationsInput | number | null
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUpdateWithoutTb_ratingInput = {
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    tb_kategori?: tb_kategoriUpdateOneWithoutTb_bukuInput
    tb_user?: tb_userUpdateOneRequiredWithoutTb_bukuInput
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }

  export type tb_bukuUncheckedUpdateWithoutTb_ratingInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    judul_buku?: StringFieldUpdateOperationsInput | string
    pengarang?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    isbn?: IntFieldUpdateOperationsInput | number
    pages?: IntFieldUpdateOperationsInput | number
    img_buku?: StringFieldUpdateOperationsInput | string
    id_kategori?: NullableIntFieldUpdateOperationsInput | number | null
    id_buku?: IntFieldUpdateOperationsInput | number
    tb_rating_tb_bukuTotb_rating_id_buku?: tb_ratingUncheckedUpdateManyWithoutTb_buku_tb_bukuTotb_rating_id_bukuInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}